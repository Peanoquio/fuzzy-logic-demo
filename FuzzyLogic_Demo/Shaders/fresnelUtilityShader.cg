/******************************************************************************/
/*!
\file fresnelUtilityShader.cg
\author Oliver Ryan Chong
\par email: oliver.chong\@digipen.edu
\par oliver.chong 900863
\par Course: CS1050
\par Project #03
\date 19/02/2012
\brief
This is the Cg shader that contains reusable code for Fresnel effect computations
Command Line Compilation: 
cgc fresnelUtilityShader.cg -entry main -profile gp4fp

Copyright (C) 2011 DigiPen Institute of Technology Singapore
*/
/******************************************************************************/


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/****************************************************************************************/
/*!
This function computes for the reflected interpolated color due to reflection.

\param cubeMapTexId
	the cube map texture id

\param reflectionVec
	the reflected vector due to reflection

\param transmittedVecR
	the transmitted red light
\param transmittedVecG
	the transmitted green light
\param transmittedVecB
	the transmitted blue light

\param fresnelReflectionFactor
	the Fresnel effect reflection factor

\param decalColor
	the color for blending

\return float4
	the reflected interpolated color due to Fresnel effect with chromatic dispersion
*/
/****************************************************************************************/
float4 ComputeInterpolatedFresnelChromaticDispersionColor( samplerCUBE cubeMapTexId, 
	float3 reflectionVec, 
	float3 transmittedVecR, float3 transmittedVecG, float3 transmittedVecB, 
	float fresnelReflectionFactor,
	float4 decalColor )
{
	// Fetch the reflected environment color
	float4 reflectedColor = texCUBE( cubeMapTexId, reflectionVec );
 
	// Compute the refracted environment color 
	float4 refractedColor;
	refractedColor.r = texCUBE( cubeMapTexId, transmittedVecR ).r;
	refractedColor.g = texCUBE( cubeMapTexId, transmittedVecG ).g;
	refractedColor.b = texCUBE( cubeMapTexId, transmittedVecB ).b;
	refractedColor.a = 1;
 
	// Compute the final color
	//float4 processedColor = lerp( refractedColor, reflectedColor, 0.5F );
	float4 processedColor = lerp( refractedColor, reflectedColor, fresnelReflectionFactor );
	//float4 processedColor = ( fresnelReflectionFactor * reflectedColor ) + ( ( 1 - fresnelReflectionFactor ) * refractedColor );
	processedColor *= decalColor;

	return processedColor;
}