/******************************************************************************/
/*!
\file lightingShaderR.v.cg
\author Oliver Ryan Chong
\par email: oliver.chong\@digipen.edu
\par oliver.chong 900863
\par Course: CS1050
\par Project #03
\date 25/01/2012
\brief
This is the Cg vertex shader for per vertex lighting
Command Line Compilation: 
cgc lightingShaderR.v.cg -entry main -profile gp4vp

Copyright (C) 2011 DigiPen Institute of Technology Singapore
*/
/******************************************************************************/


#include "lightingUtilityShader.cg";


struct vertexShaderInput
{
	/*
	float3 position : POSITION;
	float4 color : COLOR0;
	float2 texCoord : TEXCOORD0;
	float4 projTexCoord : TEXCOORD1;

	float3 normal : NORMAL;
	*/

	//for ATI
	float3 position : ATTR0;
	float4 color : ATTR3;
	float2 texCoord : ATTR8;
	float4 projTexCoord : ATTR9;
	float3 normal : ATTR2;
	//float3 objPosition : ATTR10;
};

struct vertexShaderOutput
{
	float4 position : POSITION;
	float4 color : COLOR0;
	float2 texCoord : TEXCOORD0;
	float4 projTexCoord : TEXCOORD1;
	//float3 normal : TEXCOORD2;
	//float3 objPosition : TEXCOORD3;
	float lighting : TEXCOORD2;
};


/****************************************************************************************/
/*!
vertex shader main entry point

\param IN
	the vertex shader input
	
\param modelViewMatrix
	concatenated model-view matrix
	uniform - shader is going to send this from the application

\param mvpMatrix
	concatenated model-view-projection matrix
	uniform - shader is going to send this from the application

\param textureMatrix
	concatenated texture generation matrix
	uniform - shader is going to send this from the application

\param globalAmbient
	the global ambient value
\param lightColor
	the color of the light
\param lightPosition
	the position of the light
\param eyePosition
	the position of the eye

\param Ke
	the emissive value
\param Ka
	the ambient value
\param Kd
	the diffuse value
\param Ks
	the specular value
\param shininess
	the shininess value

\param constantCoeff
	the constant attenuation coefficient
\param linearCoeff
	the linear attenuation coefficient
\param quadraticCoeff
	the quadratic attenuation coefficient

\param spotLightInnerCone
	the cosine angle of the inner cone
\param spotLightOuterCone
	the cosine angle of the outer cone

\param lightType
	the type of lighting
\param lightAttenuationFlag
	flag to enable/disable attenuation
	
\return vertexShaderOutput
	the vertex shader output

*/
/****************************************************************************************/
vertexShaderOutput main ( vertexShaderInput IN, 
						uniform float4x4 modelViewMatrix, uniform float4x4 modelViewITMatrix, uniform float4x4 mvpMatrix, uniform float4x4 textureMatrix, 
						uniform float3 globalAmbient, uniform float3 lightColor, 
						uniform float3 lightDirection, uniform float3 lightPosition, uniform float3 eyePosition, 
						uniform float3 Ke, uniform float3 Ka, uniform float3 Kd, uniform float3 Ks, uniform float shininess,
						uniform float constantCoeff, uniform float linearCoeff, uniform float quadraticCoeff, 
						uniform float spotLightInnerCone, uniform float spotLightOuterCone, 
						uniform int lightType, uniform int lightAttenuationFlag  )
{ 
	vertexShaderOutput OUT;	

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//use the model-view-projection matrix for transforming the vertex position	
	OUT.position = mul( mvpMatrix, float4( IN.position, 1 ) ); 

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//transform the position in view space for the fragment shader
	float3 viewSpacePos = mul( modelViewMatrix, float4( IN.position, 1 ) ).xyz;
	//OUT.objPosition = viewSpacePos;

	//transform the normal in view space for the fragment shader
	//should use inverse transpose of the model view matrix if model matrix has scale
	float3 viewSpaceNormal = mul( (float3x3)modelViewITMatrix, IN.normal );
	//OUT.normal = viewSpaceNormal;	

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//compute for the lighting
	Material material;
	material.Ke = Ke;
	material.Ka = Ka;
	material.Kd = Kd;
	material.Ks = Ks;
	material.shininess = shininess;

	Light light;
	light.lightType = lightType;
	light.lightAttenuationFlag = lightAttenuationFlag;
	light.lightColor = lightColor;
	light.lightPosition = lightPosition;
	light.lightDirection = lightDirection;
	light.Kc = constantCoeff;
	light.Kl = linearCoeff;
	light.Kq = quadraticCoeff;
	light.spotLightInnerCone = spotLightInnerCone;
	light.spotLightOuterCone = spotLightOuterCone;

	//pass the object position and normal for computation
	float4 lighting = ComputeLighting( material, light, viewSpacePos, viewSpaceNormal, globalAmbient, eyePosition );
	OUT.lighting = lighting;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//compute the texture coordinates for projective texturing	
	OUT.projTexCoord = mul( textureMatrix, float4( IN.position , 1 ) );

	//standard texturing
	OUT.texCoord = IN.texCoord;

	//color
	OUT.color = IN.color;	
	
	return OUT;
}