/******************************************************************************/
/*!
\file chromaticDispersionUtilityShader.cg
\author Oliver Ryan Chong
\par email: oliver.chong\@digipen.edu
\par oliver.chong 900863
\par Course: CS1050
\par Project #03
\date 19/02/2012
\brief
This is the Cg shader that contains reusable code for chromatic dispersion effect computations
Command Line Compilation: 
cgc chromaticDispersionUtilityShader.cg -entry main -profile gp4fp

Copyright (C) 2011 DigiPen Institute of Technology Singapore
*/
/******************************************************************************/


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/****************************************************************************************/
/*!
This function computes for the reflected interpolated color due to reflection.

\param cubeMapTexId
	the cube map texture id

\param transmittedVecR
	the transmitted red light
\param transmittedVecG
	the transmitted green light
\param transmittedVecB
	the transmitted blue light

\param transmittance
	the transmittance factor

\param decalColor
	the color for blending

\return float4
	the reflected interpolated color due to refractive effect with chromatic dispersion
*/
/****************************************************************************************/
float4 ComputeInterpolatedChromaticDispersionColor( samplerCUBE cubeMapTexId, 
	float3 transmittedVecR, float3 transmittedVecG, float3 transmittedVecB, 
	float transmittance, float4 decalColor )
{
	// Compute the refracted environment color 
	float4 refractedColor;
	refractedColor.r = texCUBE( cubeMapTexId, transmittedVecR ).r;
	refractedColor.g = texCUBE( cubeMapTexId, transmittedVecG ).g;
	refractedColor.b = texCUBE( cubeMapTexId, transmittedVecB ).b;
	refractedColor.a = 1;
 
	// Compute the final color
	//the Lerp function performs linear interpolation
	float4 processedColor = lerp( decalColor, refractedColor, transmittance );

	return processedColor;
}