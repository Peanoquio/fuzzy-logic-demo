/******************************************************************************/
/*!
\file lightingShader.f.cg
\author Oliver Ryan Chong
\par email: oliver.chong\@digipen.edu
\par oliver.chong 900863
\par Course: CS1050
\par Project #03
\date 25/01/2012
\brief
This is the Cg fragment shader
Command Line Compilation: 
cgc lightingShader.f.cg -entry main -profile gp4fp

Copyright (C) 2011 DigiPen Institute of Technology Singapore
*/
/******************************************************************************/


#include "generalUtilityShader.cg";

struct fragmentShaderInput
{
    float4 position : POSITION;
    float4 color : COLOR0;
    float2 texCoord : TEXCOORD0;
    float4 projTexCoord : TEXCOORD1;
    //float3 normal : TEXCOORD2;
	//float3 objPosition : TEXCOORD3;
	float lighting : TEXCOORD2;
};


struct fragmentShaderOutput
{
    float4 color : COLOR0;
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/****************************************************************************************/
/*!
fragment shader main entry point

\param IN
	the fragment shader input	
\param OUT
	the fragment shader output	

\param textureFlag
	the texture id

\param texId
	the texture Id
\param projTexId
	the projection texture Id	
*/
/****************************************************************************************/
void main( fragmentShaderInput IN, out fragmentShaderOutput OUT, 
			uniform int textureFlag, uniform sampler2D texId, 
			uniform sampler2D projTexId )
{
    //compute for the object texturing
	float4 texVal = tex2D( texId, IN.texCoord );

    //compute for the projective texturing value
	float4 projTexVal = tex2Dproj( projTexId, IN.projTexCoord );	

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	float4 decalColor = IN.color;

	float4 processedColor = ProcessTextureColor( decalColor, texVal, projTexVal, textureFlag );

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//apply lighting
	processedColor = processedColor * IN.lighting;

	//return the processed final color
	OUT.color = processedColor;
}